// Code generated by MockGen. DO NOT EDIT.
// Source: mail_service.go
//
// Generated by this command:
//
//	mockgen -source=mail_service.go -destination=mock/mail_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailService is a mock of MailService interface.
type MockMailService struct {
	ctrl     *gomock.Controller
	recorder *MockMailServiceMockRecorder
}

// MockMailServiceMockRecorder is the mock recorder for MockMailService.
type MockMailServiceMockRecorder struct {
	mock *MockMailService
}

// NewMockMailService creates a new mock instance.
func NewMockMailService(ctrl *gomock.Controller) *MockMailService {
	mock := &MockMailService{ctrl: ctrl}
	mock.recorder = &MockMailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailService) EXPECT() *MockMailServiceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailService) Send(ctx context.Context, recipient, templateFile string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, recipient, templateFile, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailServiceMockRecorder) Send(ctx, recipient, templateFile, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailService)(nil).Send), ctx, recipient, templateFile, data)
}
