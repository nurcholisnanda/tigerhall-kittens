// Code generated by MockGen. DO NOT EDIT.
// Source: mailer.go
//
// Generated by this command:
//
//	mockgen -source=mailer.go -destination=mock/mailer.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	mail "github.com/go-mail/mail/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockMailerInterface is a mock of MailerInterface interface.
type MockMailerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMailerInterfaceMockRecorder
}

// MockMailerInterfaceMockRecorder is the mock recorder for MockMailerInterface.
type MockMailerInterfaceMockRecorder struct {
	mock *MockMailerInterface
}

// NewMockMailerInterface creates a new mock instance.
func NewMockMailerInterface(ctrl *gomock.Controller) *MockMailerInterface {
	mock := &MockMailerInterface{ctrl: ctrl}
	mock.recorder = &MockMailerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailerInterface) EXPECT() *MockMailerInterfaceMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m *MockMailerInterface) DialAndSend(dialer *mail.Dialer, msg *mail.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialAndSend", dialer, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockMailerInterfaceMockRecorder) DialAndSend(dialer, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockMailerInterface)(nil).DialAndSend), dialer, msg)
}
