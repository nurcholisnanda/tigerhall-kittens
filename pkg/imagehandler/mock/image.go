// Code generated by MockGen. DO NOT EDIT.
// Source: image.go
//
// Generated by this command:
//
//	mockgen -source=image.go -destination=mock/image.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	gomock "go.uber.org/mock/gomock"
)

// MockImageHandler is a mock of ImageHandler interface.
type MockImageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockImageHandlerMockRecorder
}

// MockImageHandlerMockRecorder is the mock recorder for MockImageHandler.
type MockImageHandlerMockRecorder struct {
	mock *MockImageHandler
}

// NewMockImageHandler creates a new mock instance.
func NewMockImageHandler(ctrl *gomock.Controller) *MockImageHandler {
	mock := &MockImageHandler{ctrl: ctrl}
	mock.recorder = &MockImageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageHandler) EXPECT() *MockImageHandlerMockRecorder {
	return m.recorder
}

// ResizeAndUpload mocks base method.
func (m *MockImageHandler) ResizeAndUpload(ctx context.Context, inputImage *graphql.Upload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeAndUpload", ctx, inputImage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeAndUpload indicates an expected call of ResizeAndUpload.
func (mr *MockImageHandlerMockRecorder) ResizeAndUpload(ctx, inputImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeAndUpload", reflect.TypeOf((*MockImageHandler)(nil).ResizeAndUpload), ctx, inputImage)
}
