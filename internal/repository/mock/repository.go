// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock/repository.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// MockTigerRepository is a mock of TigerRepository interface.
type MockTigerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTigerRepositoryMockRecorder
}

// MockTigerRepositoryMockRecorder is the mock recorder for MockTigerRepository.
type MockTigerRepositoryMockRecorder struct {
	mock *MockTigerRepository
}

// NewMockTigerRepository creates a new mock instance.
func NewMockTigerRepository(ctrl *gomock.Controller) *MockTigerRepository {
	mock := &MockTigerRepository{ctrl: ctrl}
	mock.recorder = &MockTigerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigerRepository) EXPECT() *MockTigerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTigerRepository) Create(ctx context.Context, tiger *model.Tiger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tiger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTigerRepositoryMockRecorder) Create(ctx, tiger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTigerRepository)(nil).Create), ctx, tiger)
}

// GetTigerByID mocks base method.
func (m *MockTigerRepository) GetTigerByID(ctx context.Context, id string) (*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTigerByID", ctx, id)
	ret0, _ := ret[0].(*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTigerByID indicates an expected call of GetTigerByID.
func (mr *MockTigerRepositoryMockRecorder) GetTigerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTigerByID", reflect.TypeOf((*MockTigerRepository)(nil).GetTigerByID), ctx, id)
}

// ListTigers mocks base method.
func (m *MockTigerRepository) ListTigers(ctx context.Context, limit, offset int) ([]*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTigers", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTigers indicates an expected call of ListTigers.
func (mr *MockTigerRepositoryMockRecorder) ListTigers(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTigers", reflect.TypeOf((*MockTigerRepository)(nil).ListTigers), ctx, limit, offset)
}

// MockSightingRepository is a mock of SightingRepository interface.
type MockSightingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSightingRepositoryMockRecorder
}

// MockSightingRepositoryMockRecorder is the mock recorder for MockSightingRepository.
type MockSightingRepositoryMockRecorder struct {
	mock *MockSightingRepository
}

// NewMockSightingRepository creates a new mock instance.
func NewMockSightingRepository(ctrl *gomock.Controller) *MockSightingRepository {
	mock := &MockSightingRepository{ctrl: ctrl}
	mock.recorder = &MockSightingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightingRepository) EXPECT() *MockSightingRepositoryMockRecorder {
	return m.recorder
}

// CreateSighting mocks base method.
func (m *MockSightingRepository) CreateSighting(ctx context.Context, sighting *model.Sighting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSighting", ctx, sighting)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSighting indicates an expected call of CreateSighting.
func (mr *MockSightingRepositoryMockRecorder) CreateSighting(ctx, sighting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSighting", reflect.TypeOf((*MockSightingRepository)(nil).CreateSighting), ctx, sighting)
}

// GetLatestSightingByTigerID mocks base method.
func (m *MockSightingRepository) GetLatestSightingByTigerID(ctx context.Context, tigerID string) (*model.Sighting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSightingByTigerID", ctx, tigerID)
	ret0, _ := ret[0].(*model.Sighting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSightingByTigerID indicates an expected call of GetLatestSightingByTigerID.
func (mr *MockSightingRepositoryMockRecorder) GetLatestSightingByTigerID(ctx, tigerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSightingByTigerID", reflect.TypeOf((*MockSightingRepository)(nil).GetLatestSightingByTigerID), ctx, tigerID)
}

// GetSightingsByTigerID mocks base method.
func (m *MockSightingRepository) GetSightingsByTigerID(ctx context.Context, tigerID string, limit, offset int) ([]*model.Sighting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSightingsByTigerID", ctx, tigerID, limit, offset)
	ret0, _ := ret[0].([]*model.Sighting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSightingsByTigerID indicates an expected call of GetSightingsByTigerID.
func (mr *MockSightingRepositoryMockRecorder) GetSightingsByTigerID(ctx, tigerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSightingsByTigerID", reflect.TypeOf((*MockSightingRepository)(nil).GetSightingsByTigerID), ctx, tigerID, limit, offset)
}

// ListUserCreatedSightingByTigerID mocks base method.
func (m *MockSightingRepository) ListUserCreatedSightingByTigerID(ctx context.Context, tigerID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserCreatedSightingByTigerID", ctx, tigerID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserCreatedSightingByTigerID indicates an expected call of ListUserCreatedSightingByTigerID.
func (mr *MockSightingRepositoryMockRecorder) ListUserCreatedSightingByTigerID(ctx, tigerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserCreatedSightingByTigerID", reflect.TypeOf((*MockSightingRepository)(nil).ListUserCreatedSightingByTigerID), ctx, tigerID)
}
