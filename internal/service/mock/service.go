// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	model "github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWT) GenerateToken(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTMockRecorder) GenerateToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWT)(nil).GenerateToken), ctx, userID)
}

// ValidateToken mocks base method.
func (m *MockJWT) ValidateToken(ctx context.Context, requestToken string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, requestToken)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJWTMockRecorder) ValidateToken(ctx, requestToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJWT)(nil).ValidateToken), ctx, requestToken)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, email, password string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, email, password)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, input model.NewUser) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, input)
}

// MockTigerService is a mock of TigerService interface.
type MockTigerService struct {
	ctrl     *gomock.Controller
	recorder *MockTigerServiceMockRecorder
}

// MockTigerServiceMockRecorder is the mock recorder for MockTigerService.
type MockTigerServiceMockRecorder struct {
	mock *MockTigerService
}

// NewMockTigerService creates a new mock instance.
func NewMockTigerService(ctrl *gomock.Controller) *MockTigerService {
	mock := &MockTigerService{ctrl: ctrl}
	mock.recorder = &MockTigerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigerService) EXPECT() *MockTigerServiceMockRecorder {
	return m.recorder
}

// CreateTiger mocks base method.
func (m *MockTigerService) CreateTiger(ctx context.Context, input model.TigerInput) (*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiger", ctx, input)
	ret0, _ := ret[0].(*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTiger indicates an expected call of CreateTiger.
func (mr *MockTigerServiceMockRecorder) CreateTiger(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiger", reflect.TypeOf((*MockTigerService)(nil).CreateTiger), ctx, input)
}
