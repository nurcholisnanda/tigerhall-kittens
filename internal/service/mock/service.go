// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	graphql "github.com/99designs/gqlgen/graphql"
	jwt "github.com/golang-jwt/jwt/v5"
	model "github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWT) GenerateToken(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTMockRecorder) GenerateToken(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWT)(nil).GenerateToken), ctx, userID)
}

// ValidateToken mocks base method.
func (m *MockJWT) ValidateToken(ctx context.Context, requestToken string) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, requestToken)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJWTMockRecorder) ValidateToken(ctx, requestToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJWT)(nil).ValidateToken), ctx, requestToken)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), ctx, id)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, email, password string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, email, password)
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, input *model.NewUser) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, input)
}

// MockTigerService is a mock of TigerService interface.
type MockTigerService struct {
	ctrl     *gomock.Controller
	recorder *MockTigerServiceMockRecorder
}

// MockTigerServiceMockRecorder is the mock recorder for MockTigerService.
type MockTigerServiceMockRecorder struct {
	mock *MockTigerService
}

// NewMockTigerService creates a new mock instance.
func NewMockTigerService(ctrl *gomock.Controller) *MockTigerService {
	mock := &MockTigerService{ctrl: ctrl}
	mock.recorder = &MockTigerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTigerService) EXPECT() *MockTigerServiceMockRecorder {
	return m.recorder
}

// CreateTiger mocks base method.
func (m *MockTigerService) CreateTiger(ctx context.Context, input *model.TigerInput) (*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiger", ctx, input)
	ret0, _ := ret[0].(*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTiger indicates an expected call of CreateTiger.
func (mr *MockTigerServiceMockRecorder) CreateTiger(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiger", reflect.TypeOf((*MockTigerService)(nil).CreateTiger), ctx, input)
}

// ListTigers mocks base method.
func (m *MockTigerService) ListTigers(ctx context.Context, limit, offset int) ([]*model.Tiger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTigers", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Tiger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTigers indicates an expected call of ListTigers.
func (mr *MockTigerServiceMockRecorder) ListTigers(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTigers", reflect.TypeOf((*MockTigerService)(nil).ListTigers), ctx, limit, offset)
}

// MockSightingService is a mock of SightingService interface.
type MockSightingService struct {
	ctrl     *gomock.Controller
	recorder *MockSightingServiceMockRecorder
}

// MockSightingServiceMockRecorder is the mock recorder for MockSightingService.
type MockSightingServiceMockRecorder struct {
	mock *MockSightingService
}

// NewMockSightingService creates a new mock instance.
func NewMockSightingService(ctrl *gomock.Controller) *MockSightingService {
	mock := &MockSightingService{ctrl: ctrl}
	mock.recorder = &MockSightingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightingService) EXPECT() *MockSightingServiceMockRecorder {
	return m.recorder
}

// CreateSighting mocks base method.
func (m *MockSightingService) CreateSighting(ctx context.Context, newSighting *model.SightingInput) (*model.Sighting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSighting", ctx, newSighting)
	ret0, _ := ret[0].(*model.Sighting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSighting indicates an expected call of CreateSighting.
func (mr *MockSightingServiceMockRecorder) CreateSighting(ctx, newSighting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSighting", reflect.TypeOf((*MockSightingService)(nil).CreateSighting), ctx, newSighting)
}

// GetResizedImage mocks base method.
func (m *MockSightingService) GetResizedImage(ctx context.Context, inputImage *graphql.Upload) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResizedImage", ctx, inputImage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResizedImage indicates an expected call of GetResizedImage.
func (mr *MockSightingServiceMockRecorder) GetResizedImage(ctx, inputImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResizedImage", reflect.TypeOf((*MockSightingService)(nil).GetResizedImage), ctx, inputImage)
}

// ListSightings mocks base method.
func (m *MockSightingService) ListSightings(ctx context.Context, tigerID string, limit, offset int) ([]*model.Sighting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSightings", ctx, tigerID, limit, offset)
	ret0, _ := ret[0].([]*model.Sighting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSightings indicates an expected call of ListSightings.
func (mr *MockSightingServiceMockRecorder) ListSightings(ctx, tigerID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSightings", reflect.TypeOf((*MockSightingService)(nil).ListSightings), ctx, tigerID, limit, offset)
}

// MockMailerInterface is a mock of MailerInterface interface.
type MockMailerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMailerInterfaceMockRecorder
}

// MockMailerInterfaceMockRecorder is the mock recorder for MockMailerInterface.
type MockMailerInterfaceMockRecorder struct {
	mock *MockMailerInterface
}

// NewMockMailerInterface creates a new mock instance.
func NewMockMailerInterface(ctrl *gomock.Controller) *MockMailerInterface {
	mock := &MockMailerInterface{ctrl: ctrl}
	mock.recorder = &MockMailerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailerInterface) EXPECT() *MockMailerInterfaceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMailerInterface) Send(ctx context.Context, recipient, templateFile string, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, recipient, templateFile, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMailerInterfaceMockRecorder) Send(ctx, recipient, templateFile, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMailerInterface)(nil).Send), ctx, recipient, templateFile, data)
}

// MockNotifService is a mock of NotifService interface.
type MockNotifService struct {
	ctrl     *gomock.Controller
	recorder *MockNotifServiceMockRecorder
}

// MockNotifServiceMockRecorder is the mock recorder for MockNotifService.
type MockNotifServiceMockRecorder struct {
	mock *MockNotifService
}

// NewMockNotifService creates a new mock instance.
func NewMockNotifService(ctrl *gomock.Controller) *MockNotifService {
	mock := &MockNotifService{ctrl: ctrl}
	mock.recorder = &MockNotifServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifService) EXPECT() *MockNotifServiceMockRecorder {
	return m.recorder
}

// CloseNotificationChannel mocks base method.
func (m *MockNotifService) CloseNotificationChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseNotificationChannel")
}

// CloseNotificationChannel indicates an expected call of CloseNotificationChannel.
func (mr *MockNotifServiceMockRecorder) CloseNotificationChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseNotificationChannel", reflect.TypeOf((*MockNotifService)(nil).CloseNotificationChannel))
}

// FetchPreviousSighters mocks base method.
func (m *MockNotifService) FetchPreviousSighters(ctx context.Context, tigerID string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPreviousSighters", ctx, tigerID)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPreviousSighters indicates an expected call of FetchPreviousSighters.
func (mr *MockNotifServiceMockRecorder) FetchPreviousSighters(ctx, tigerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPreviousSighters", reflect.TypeOf((*MockNotifService)(nil).FetchPreviousSighters), ctx, tigerID)
}

// SendNotification mocks base method.
func (m *MockNotifService) SendNotification(notif model.Notification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotification", notif)
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockNotifServiceMockRecorder) SendNotification(notif any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotifService)(nil).SendNotification), notif)
}

// StartNotificationConsumer mocks base method.
func (m *MockNotifService) StartNotificationConsumer(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartNotificationConsumer", ctx)
}

// StartNotificationConsumer indicates an expected call of StartNotificationConsumer.
func (mr *MockNotifServiceMockRecorder) StartNotificationConsumer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartNotificationConsumer", reflect.TypeOf((*MockNotifService)(nil).StartNotificationConsumer), ctx)
}
