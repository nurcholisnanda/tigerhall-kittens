package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/model"
	"github.com/nurcholisnanda/tigerhall-kittens/pkg/errors"
	"github.com/sirupsen/logrus"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	return r.UserSvc.Login(ctx, email, password)
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	return r.UserSvc.Register(ctx, input)
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// CreateTiger is the resolver for the createTiger field.
func (r *mutationResolver) CreateTiger(ctx context.Context, input model.TigerInput) (*model.Tiger, error) {
	tiger, err := r.TigerSvc.CreateTiger(ctx, input)
	if err != nil {
		switch err.(type) {
		case *errors.InvalidCoordinatesError:
			return nil, &gqlerror.Error{
				Message: "invalid coordinates",
				Extensions: map[string]interface{}{
					"code":    errors.INVALID_INPUT,
					"details": err.Error(),
				},
			}
		case *errors.InvalidDateOfBirthError:
			return nil, &gqlerror.Error{
				Message: "invalid date of birth",
				Extensions: map[string]interface{}{
					"code":    errors.INVALID_INPUT,
					"details": err.Error(),
				},
			}
		case *errors.InvalidLastSeenTimeError:
			return nil, &gqlerror.Error{
				Message: "invalid last seen time",
				Extensions: map[string]interface{}{
					"code":    errors.INVALID_INPUT,
					"details": err.Error(),
				},
			}
		case *errors.TigerCreationError:
			return nil, &gqlerror.Error{
				Message: "failed to create tiger",
				Extensions: map[string]interface{}{
					"code":    errors.INVALID_INPUT,
					"details": err.Error(),
				},
			}
		default:
			// Log the unexpected error for investigation
			logrus.Error(ctx, "Unexpected error creating tiger", "error:", err.Error())
			return nil, gqlerror.Errorf("Internal Server Error")
		}
	}

	return tiger, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return r.UserSvc.GetUserByID(ctx, id)
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "Success", nil
}

// AuthOps returns AuthOpsResolver implementation.
func (r *Resolver) AuthOps() AuthOpsResolver { return &authOpsResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
