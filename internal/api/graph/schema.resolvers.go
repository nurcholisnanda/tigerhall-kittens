package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/generated"
	"github.com/nurcholisnanda/tigerhall-kittens/internal/api/graph/model"
	"github.com/nurcholisnanda/tigerhall-kittens/pkg/errorhandler"
	"github.com/sirupsen/logrus"
)

// Login is the resolver for the login field.
func (r *authOpsResolver) Login(ctx context.Context, obj *model.AuthOps, email string, password string) (interface{}, error) {
	loginResponse, err := r.UserSvc.Login(ctx, email, password)
	if err != nil {
		return nil, errorhandler.NewGraphQLError("Login failed", map[string]interface{}{
			"code":    errorhandler.GetErrorCode(err),
			"details": err.Error(),
		})
	}
	return loginResponse, nil
}

// Register is the resolver for the register field.
func (r *authOpsResolver) Register(ctx context.Context, obj *model.AuthOps, input model.NewUser) (interface{}, error) {
	user, err := r.UserSvc.Register(ctx, &input)
	if err != nil {
		return nil, errorhandler.NewGraphQLError("Registration failed", map[string]interface{}{
			"code":    errorhandler.GetErrorCode(err),
			"details": err.Error(),
		})
	}
	return user, nil
}

// CreateSighting is the resolver for the createSighting field.
func (r *createOpsResolver) CreateSighting(ctx context.Context, obj *model.CreateOps, input model.SightingInput) (*model.Sighting, error) {
	sighting, err := r.SightingSvc.CreateSighting(ctx, &input)
	if err != nil {
		return nil, errorhandler.NewGraphQLError("Failed to create sighting", map[string]interface{}{
			"code":    errorhandler.GetErrorCode(err),
			"details": err.Error(),
		})
	}
	return sighting, nil
}

// CreateTiger is the resolver for the createTiger field.
func (r *createOpsResolver) CreateTiger(ctx context.Context, obj *model.CreateOps, input model.TigerInput) (*model.Tiger, error) {
	tiger, err := r.TigerSvc.CreateTiger(ctx, &input)
	if err != nil {
		return nil, errorhandler.NewGraphQLError("Failed to create tiger", map[string]interface{}{
			"code":    errorhandler.GetErrorCode(err),
			"details": err.Error(),
		})
	}
	return tiger, nil
}

// ListTigers is the resolver for the ListTigers field.
func (r *listOpsResolver) ListTigers(ctx context.Context, obj *model.ListOps, limit int, offset int) ([]*model.Tiger, error) {
	// Call your tiger service to fetch tigers with pagination
	tigers, err := r.TigerSvc.ListTigers(ctx, limit, offset)
	if err != nil {
		// Log the unexpected error for investigation
		logrus.Error(ctx, "Unexpected error getting tiger list", "error:", err.Error())
		return nil, errorhandler.NewGraphQLError("Failed to get list of Tigers", map[string]interface{}{
			"code":    errorhandler.INTERNAL_SERVER_ERROR,
			"details": err.Error(),
		})
	}
	return tigers, nil
}

// ListSightings is the resolver for the listSightings field.
func (r *listOpsResolver) ListSightings(ctx context.Context, obj *model.ListOps, tigerID string, limit int, offset int) ([]*model.Sighting, error) {
	sightings, err := r.SightingSvc.ListSightings(ctx, tigerID, limit, offset)
	if err != nil {
		// Log the unexpected error for investigation
		logrus.Error(ctx, "Unexpected error getting sighting list", "error:", err.Error())
		return nil, errorhandler.NewGraphQLError("Failed to get list of Sightings", map[string]interface{}{
			"code":    errorhandler.INTERNAL_SERVER_ERROR,
			"details": err.Error(),
		})
	}
	return sightings, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.AuthOps, error) {
	return &model.AuthOps{}, nil
}

// Create is the resolver for the create field.
func (r *mutationResolver) Create(ctx context.Context) (*model.CreateOps, error) {
	return &model.CreateOps{}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return r.UserSvc.GetUserByID(ctx, id)
}

// List is the resolver for the list field.
func (r *queryResolver) List(ctx context.Context) (*model.ListOps, error) {
	return &model.ListOps{}, nil
}

// AuthOps returns generated.AuthOpsResolver implementation.
func (r *Resolver) AuthOps() generated.AuthOpsResolver { return &authOpsResolver{r} }

// CreateOps returns generated.CreateOpsResolver implementation.
func (r *Resolver) CreateOps() generated.CreateOpsResolver { return &createOpsResolver{r} }

// ListOps returns generated.ListOpsResolver implementation.
func (r *Resolver) ListOps() generated.ListOpsResolver { return &listOpsResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type authOpsResolver struct{ *Resolver }
type createOpsResolver struct{ *Resolver }
type listOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
