# GraphQL schema example
#
# https://gqlgen.com/getting-started/
directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# new directive
directive @auth on FIELD_DEFINITION

scalar Any
scalar Time
scalar Upload

type User {
  id: ID!
  name: String!
  email: String!
}

input NewUser {
  name: String!
  email: String!
  password: String!
}

type Tiger {
  id: ID!
  name: String!
  dateOfBirth: Time!
  lastSeenTime: Time!
  lastSeenCoordinate:Coordinate!
}

type Sighting {
  id: ID!
  tigerID: String!
  lastSeenTime: Time!
  lastSeenCoordinate: Coordinate!
  image: String
}

type Coordinate {
  latitude: Float!
  longitude: Float!
}

input CoordinateInput {
  latitude: Float!
  longitude: Float!
}

input TigerInput {
  name: String!
  dateOfBirth: Time!
  lastSeenTime: Time!
  lastSeenCoordinate: CoordinateInput!
}

input SightingInput {
  tigerID: String!
  Coordinate: CoordinateInput!
  image: Upload
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
}

type ListOps {
  listTigers(
    limit: Int! = 10,    # Default limit of 10 tigers per page
    offset: Int! = 0     # Default offset of 0 (start at the beginning)
  ): [Tiger!]! @goField(forceResolver: true)
  listSightings(
    tigerID: String!, 
    limit: Int! = 10,    # Default limit of 10 sightings per page
    offset: Int! = 0     # Default offset of 0 (start at the beginning)
  ): [Sighting!]! @goField(forceResolver: true)
}

type CreateOps {
  createSighting(
    input: SightingInput!
  ): Sighting! @goField(forceResolver: true) @auth
  createTiger(
    input: TigerInput!
  ): Tiger! @goField(forceResolver: true) @auth
}

type Query {
  user(id: ID!): User! @goField(forceResolver: true)
  list: ListOps! @goField
}

type Mutation {
  auth: AuthOps! @goField(forceResolver: true)
  create: CreateOps! @goField(forceResolver: true) @auth
}

